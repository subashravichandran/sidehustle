require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "api/v1/money_logs", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # MoneyLog. As you add validations to MoneyLog, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { income: 1000.00, expenses: { 'lunch': 6000, 'travel': 2000 } }
  }

  let(:invalid_attributes) {
    { income: nil, expenses: 1000 }
  }

  describe "GET /index" do
    it "renders a successful response" do
      MoneyLog.create! valid_attributes
      get api_v1_money_logs_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      money_log = MoneyLog.create! valid_attributes
      get api_v1_money_log_url(money_log)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_api_v1_money_log_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      money_log = MoneyLog.create! valid_attributes
      get edit_api_v1_money_log_url(money_log)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new MoneyLog" do
        expect {
          post api_v1_money_logs_url, params: { money_log: valid_attributes }
        }.to change(MoneyLog, :count).by(1)
      end

      it "redirects to the created money_log" do
        post api_v1_money_logs_url, params: { money_log: valid_attributes }
        expect(response).to be_successful
        expect(JSON.parse(response.body)["notice"]).to eq('Saved successfully')
      end
    end

    context "with invalid parameters" do
      it "does not create a new MoneyLog" do
        expect {
          post api_v1_money_logs_url, params: { money_log: invalid_attributes }
        }.to change(MoneyLog, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post api_v1_money_logs_url, params: { money_log: invalid_attributes }
        expect(JSON.parse(response.body)["status"]).to eq("unprocessable_entity")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { income: 1500.00, expenses: { 'lunch': 5000, 'travel': 1000 } }
      }

      it "updates the requested money_log" do
        money_log = MoneyLog.create! valid_attributes
        patch api_v1_money_log_url(money_log), params: { money_log: new_attributes }
        expect(money_log.reload.income).to be(1500.0)
      end

      it "redirects to the money_log" do
        money_log = MoneyLog.create! valid_attributes
        patch api_v1_money_log_url(money_log), params: { money_log: new_attributes }
        money_log.reload
        expect(response).to have_http_status(:ok)
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        money_log = MoneyLog.create! valid_attributes
        patch api_v1_money_log_url(money_log), params: { money_log: invalid_attributes }
        expect(JSON.parse(response.body)["status"]).to eq("unprocessable_entity")
      end
    end
  end

  # describe "DELETE /destroy" do
    # it "destroys the requested money_log" do
      # money_log = MoneyLog.create! valid_attributes
      # expect {
        # delete api_v1_money_log_url(money_log)
      # }.to change(MoneyLog, :count).by(-1)
    # end

    # it "redirects to the money_logs list" do
      # money_log = MoneyLog.create! valid_attributes
      # delete api_v1_money_log_url(money_log)
      # expect(response).to redirect_to(api_v1_money_logs_url)
    # end
  # end
end
